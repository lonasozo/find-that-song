<!DOCTYPE html>
<html>
  <head>
    <title>Recently Played Songs</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      .track-meta-extended {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 5px;
        font-size: 0.85em;
      }
      
      .meta-tag {
        background: rgba(29, 185, 84, 0.15);
        padding: 2px 8px;
        border-radius: 12px;
        color: #1DB954;
        font-weight: 500;
      }
      
      .explicit-tag {
        background: rgba(255, 0, 0, 0.1);
        color: #ff4444;
      }
      
      .context-info {
        margin-top: 10px;
        font-style: italic;
        color: #666;
      }
      
      .preview-button {
        background: #1DB954;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 15px;
        cursor: pointer;
        margin-top: 10px;
        font-size: 0.9em;
      }
      
      .preview-button:hover {
        background: #19a34a;
      }
      
      .relative-time {
        font-weight: normal;
        font-style: italic;
        color: #888;
      }

      /* Styles for links */
      .artist-link, .album-link {
        color: inherit;
        text-decoration: none;
        transition: color 0.2s ease;
      }
      
      .artist-link:hover, .album-link:hover {
        color: #1DB954;
        text-decoration: underline;
      }
      
      .track-image {
        position: relative;
        overflow: hidden;
        border-radius: 4px;
      }
      
      .track-image a.cover-link {
        display: block;
        width: 100%;
        height: 100%;
        position: relative;
      }
      
      .track-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      
      .track-play-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
        color: white;
        font-size: 1.5rem;
      }
      
      .cover-link:hover .track-play-overlay {
        opacity: 1;
      }
      
      .track-play-overlay.active {
        opacity: 1;
      }

      /* New style for track title link */
      .track-link {
        color: inherit;
        text-decoration: none;
        font-weight: inherit;
        transition: color 0.2s ease;
      }
      
      .track-link:hover {
        color: #1DB954;
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <div class="container">
      
      <div class="content-header">
        <h1><%= title %></h1>
      </div>

      <div class="track-list-container">
        <% if (items && items.length > 0) { %>
          <div class="track-list">
            <% items.forEach((item, index) => { %>
              <div class="track-item" data-spotify-url="<%= item.track.external_urls.spotify %>" data-duration="<%= item.track.duration_ms %>" data-explicit="<%= item.track.explicit %>" data-played-at="<%= item.played_at %>">
                <div class="track-number"><%= index + 1 %></div>
                <div class="track-image">
                  <a href="<%= item.track.external_urls.spotify %>" target="_blank" class="cover-link">
                    <% if (item.track.album.images && item.track.album.images.length > 0) { %>
                      <img src="<%= item.track.album.images[0].url %>" alt="<%= item.track.album.name %>" loading="lazy">
                    <% } else { %>
                      <div class="no-image">ðŸŽµ</div>
                    <% } %>
                    
                    <!-- Play overlay now inside the anchor tag -->
                    <div class="track-play-overlay">
                      <i class="fas fa-play"></i>
                    </div>
                  </a>
                </div>
                <div class="track-info">
                  <div class="track-name">
                    <!-- Add link to track title -->
                    <a href="<%= item.track.external_urls.spotify %>" target="_blank" class="track-link">
                      <%= item.track.name %>
                    </a>
                  </div>
                  <div class="track-artist">
                    <% item.track.artists.forEach((artist, i) => { %>
                      <a href="<%= artist.external_urls.spotify %>" target="_blank" class="artist-link">
                        <%= artist.name %><%= i < item.track.artists.length - 1 ? ', ' : '' %>
                      </a>
                    <% }) %>
                  </div>
                  <div class="track-meta">
                    <span class="track-album">
                      <a href="<%= item.track.album.external_urls.spotify %>" target="_blank" class="album-link">
                        <%= item.track.album.name %>
                      </a>
                    </span>
                    <span class="track-played-at">Played: <%= new Date(item.played_at).toLocaleString() %></span>
                  </div>
                </div>
                <!-- Replace the old track-actions with the Spotify icon button -->
                <div class="track-actions">
                  <a href="<%= item.track.external_urls.spotify %>" target="_blank" class="spotify-link">
                    <i class="fab fa-spotify"></i>
                  </a>
                </div>
              </div>
            <% }) %>
          </div>
        <% } else { %>
          <div class="no-content-message">
            <p>No recently played tracks found.</p>
          </div>
        <% } %>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Solo per dispositivi mobili
        if (window.innerWidth <= 480) {
          const trackItems = document.querySelectorAll('.track-item');
          
          trackItems.forEach(item => {
            // Get the Spotify URL and the overlay - now inside anchor tag
            const spotifyUrl = item.getAttribute('data-spotify-url');
            const coverLink = item.querySelector('.cover-link');
            const overlay = coverLink.querySelector('.track-play-overlay');
            
            // Mobile tap handler for non-link areas of the track item
            item.addEventListener('click', function(e) {
              // Skip if clicking on any link or its children
              if (e.target.tagName === 'A' || e.target.closest('a')) {
                return;
              }
              
              // Show overlay when tapping anywhere on the track
              e.preventDefault();
              
              // Remove other active overlays
              document.querySelectorAll('.track-play-overlay.active').forEach(el => {
                if (el !== overlay) el.classList.remove('active');
              });
              
              // Toggle this overlay
              overlay.classList.toggle('active');
              
              // Auto-hide after timeout
              setTimeout(() => {
                overlay.classList.remove('active');
              }, 3000);
            });
            
            // Special handling for direct overlay clicks - not needed anymore as the overlay is
            // now part of the anchor tag and will naturally navigate when clicked
          });
        } else {
          // For desktop: ensure hovering works properly
          const coverLinks = document.querySelectorAll('.cover-link');
          coverLinks.forEach(link => {
            const overlay = link.querySelector('.track-play-overlay');
            
            // Show overlay on hover for desktop
            link.addEventListener('mouseenter', () => {
              overlay.style.opacity = '1';
            });
            
            link.addEventListener('mouseleave', () => {
              overlay.style.opacity = '0';
            });
          });
        }
        
        // Format track duration from milliseconds to MM:SS
        function formatDuration(ms) {
          const minutes = Math.floor(ms / 60000);
          const seconds = ((ms % 60000) / 1000).toFixed(0);
          return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
        }
        
        // Convert timestamp to relative time (e.g., "2 hours ago")
        function getRelativeTime(timestamp) {
          const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });
          const now = new Date();
          const playedDate = new Date(timestamp);
          const diffInSeconds = Math.floor((playedDate - now) / 1000);
          
          if (Math.abs(diffInSeconds) < 60) {
            return rtf.format(diffInSeconds, 'second');
          }
          
          const diffInMinutes = Math.floor(diffInSeconds / 60);
          if (Math.abs(diffInMinutes) < 60) {
            return rtf.format(diffInMinutes, 'minute');
          }
          
          const diffInHours = Math.floor(diffInMinutes / 60);
          if (Math.abs(diffInHours) < 24) {
            return rtf.format(diffInHours, 'hour');
          }
          
          const diffInDays = Math.floor(diffInHours / 24);
          return rtf.format(diffInDays, 'day');
        }
        
        // Enhance the track items with additional information
        function enhanceTrackItems() {
          const trackItems = document.querySelectorAll('.track-item');
          
          trackItems.forEach(item => {
            const metaDiv = item.querySelector('.track-meta');
            if (!metaDiv) return;
            
            // Add track duration if available in the dataset
            const trackDuration = item.getAttribute('data-duration');
            if (trackDuration) {
              const durationSpan = document.createElement('span');
              durationSpan.className = 'track-duration';
              durationSpan.textContent = formatDuration(trackDuration);
              metaDiv.appendChild(durationSpan);
            }
            
            // Add explicit tag if track is explicit
            // const isExplicit = item.getAttribute('data-explicit') === 'true';
            // if (isExplicit) {
            //   const explicitTag = document.createElement('span');
            //   explicitTag.textContent = 'Explicit ';
            //   metaDiv.appendChild(explicitTag);
            // }
            
            // Add relative time to the played_at timestamp
            const playedAt = item.getAttribute('data-played-at');
            if (playedAt) {
              const timeSpan = item.querySelector('.track-played-at');
              if (timeSpan) {
                const relativeTime = document.createElement('span');
                relativeTime.className = 'relative-time';
                relativeTime.textContent = ' (' + getRelativeTime(playedAt) + ')';
                timeSpan.appendChild(relativeTime);
              }
            }
          });
        }
        
        // Call the enhancement function
        enhanceTrackItems();
      });
    </script>
  </body>
</html>
